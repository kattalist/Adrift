/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adrift;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author 073787251
 */
public class MainFrame extends javax.swing.JFrame {

    static ArrayList<Tile> board = new ArrayList<>();
    boolean keepGoing = true;

    private static final int IFW = JComponent.WHEN_IN_FOCUSED_WINDOW;
    private static final String rotRight = "rotate right";
    private static final String rotLeft = "rotate left";
    private static final String moveUp = "move up";
    private static final String moveDown = "move down";

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initBoard();
        initComponents();
        canvas1.getInputMap(IFW).put(KeyStroke.getKeyStroke("LEFT"), rotRight);
        canvas1.getInputMap(IFW).put(KeyStroke.getKeyStroke("RIGHT"), rotLeft);
        canvas1.getInputMap(IFW).put(KeyStroke.getKeyStroke("UP"), moveUp);
        canvas1.getInputMap(IFW).put(KeyStroke.getKeyStroke("DOWN"), moveDown);

        canvas1.getActionMap().put(rotRight, new rotAction(3));
        canvas1.getActionMap().put(rotLeft, new rotAction(-3));
        canvas1.getActionMap().put(moveUp, new moveAction(3));
        canvas1.getActionMap().put(moveDown, new moveAction(-3));
    }

    public void initBoard() {
        for (double i = 0; i < 5; i++) { //TILE X VALUES
            for (double j = 0; j < 5; j++) { //TILE Y VALUES
                board.add(new Tile(Tile.centerX + (i-2.5) * 100, Tile.centerY + (j-2.5) * 100));
            }
        }
    }

    public void stop() {
        keepGoing = false;
    }

    public void runLoop() {
        while (keepGoing) {
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas1 = new adrift.Canvas();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        canvas1.setPreferredSize(new java.awt.Dimension(750, 750));

        javax.swing.GroupLayout canvas1Layout = new javax.swing.GroupLayout(canvas1);
        canvas1.setLayout(canvas1Layout);
        canvas1Layout.setHorizontalGroup(
            canvas1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        canvas1Layout.setVerticalGroup(
            canvas1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    private class moveAction extends AbstractAction {
        Graphics g;
        int move;

        moveAction(int move) {
            this.move = move;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            repaint();
            if (canvas1.collided) {
               //Create straight line to rotated center point
               for (Tile t : board) {
                   t.y += move;
                   //t.x += Tile.vx;
                   //t.y += Tile.vy;
               }
               Tile.centerY += move;
            } 
        }
    }

    private class rotAction extends AbstractAction {

        int rot;

        rotAction(int rot) {
            this.rot = rot;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            Tile.rotScale += rot;
            repaint();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private adrift.Canvas canvas1;
    // End of variables declaration//GEN-END:variables
}
